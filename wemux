#!/bin/bash
# wemux by Matt Furden @zolrath
# version 1.1.0
#
# wemux allows you to start a shared tmux session using the command 'wemux'.
# Clients have the option of mirroring, which will give them read-only access,
# or pairing, which will allow them to edit your file (shared cursor) or work
# in another window (separate cursors) in the hosts tmux session.
#
# To set a user as host add their username to the host_list array.
#
# WEMUX HOST COMMANDS:
# wemux start : Start the wemux session/join an exist wemux session.
# wemux stop  : Stop the wemux session, delete the session file.
# wemux help  : Display the help screen.
#
# WEMUX CLIENT COMMANDS:
# wemux mirror: Attach to Host in read-only mode.
# wemux pair  : Attach to Host in pair mode, which allows editing.
# wemux help  : Display the help screen.

###############################################################################

# Host List:
# Add names of users who should use wemux in host mode.
# ex: host_list=(zolrath csagan brocksamson)
host_list=(furd ottiferous)

# Set $wemux to wemux session file.
wemux="tmux -S /tmp/wemux -u"

# Host mode, used when user is listed in the host_list array.
host_mode() {
  # Start the server if it doesn't exist, otherwise reattach.
  start_server() {
    if ! $wemux has-session -t Host 2>/dev/null; then
      $wemux new-session -d -s Host
      chmod 1777 /tmp/wemux
      echo "wemux server started."
    fi
    reattach
  }

  # Reattach to the wemux session.
  reattach() {
    $wemux display-message "$USER has reattached."
    $wemux attach -t Host
    $wemux display-message "$USER has detached."
  }

  # Stop the wemux session and remove the /tmp/wemux file.
  stop_server() {
    if $wemux kill-server; then
      echo "wemux server stopped."
    else
      echo "No wemux server running."
    fi
    if [ -e /tmp/wemux ]; then
      if rm /tmp/wemux; then
        echo "Removed /tmp/wemux."
      else
        echo "Could not remove /tmp/wemux. Please check file ownership."
      fi
    else
      echo "The wemux session file /tmp/wemux does not exist."
    fi
  }

  # Display the commands available in host mode.
  display_host_commands() {
    echo "To host a wemux session please use one of the following:"
    echo "    [s]  start: Start the wemux session/join an existing wemux session."
    echo "    [k]   stop: Kill the wemux session, delete the session file."
    echo "    [h]   help: Display this screen."
    echo "       no args: Start the wemux session/join an existing wemux session."
  }

  # Host mode command handling:
  # If no command given, call start server.
  if [ -z "$1" ]; then
    start_server
  else
    case "$1" in
      start|s) start_server;;
      stop|st) stop_server;;
      kill|k)  stop_server;;
      help|h)  display_host_commands;;
      *)       $wemux $1;;
    esac
  fi
}

# Client Mode, used when user is NOT listed in the host_list array.
client_mode() {
  # Mirror mode, allows the user to view wemux session in read only mode.
  mirror_mode() {
    if $wemux has-session -t Host >/dev/null 2>&1; then
      $wemux display-message "$USER has attached in mirror mode."
      $wemux attach -t Host -r
      $wemux display-message "$USER has detached."
    else
      echo "No wemux session to mirror."
    fi
  }

  # Pair mode, allows user to interact with wemux session.
  # Will connect to existing pair session or create one if necessary.
  pair_mode() {
    if $wemux has-session -t $USER >/dev/null 2>&1; then
      $wemux display-message "$USER has reattached in pair mode."
      $wemux attach -t $USER
      $wemux display-message "$USER has detached."
    elif $wemux has-session -t Host >/dev/null 2>&1; then
      $wemux display-message "$USER has attached in pair mode."
      $wemux new-session -d -t Host -s $USER
      $wemux new-window -n $USER
      $wemux attach -t $USER
      $wemux display-message "$USER has detached."
    else
      echo "No wemux session to pair with."
    fi
  }

  # Reattach based upon presence of existing pair mode session.
  # If pair mode session exists, reattach to it.
  # If no pair mode session exists, mirror the host.
  smart_reattach() {
    if $wemux has-session -t $USER >/dev/null 2>&1; then
      $wemux display-message "$USER has reattached in pair mode."
      $wemux attach -t $USER
      $wemux display-message "$USER has detached."
    elif $wemux has-session -t Host >/dev/null 2>&1; then
      $wemux display-message "$USER has attached in mirror mode."
      $wemux attach -t Host -r
      $wemux display-message "$USER has detached."
    else
      echo "No wemux session to attach to."
    fi
  }

  # Display the commands available in client mode.
  display_client_commands() {
    echo "To connect to wemux please use one of the following:"
    echo "    [m] mirror: Attach to Host in read-only mode."
    echo "    [p]   pair: Attach to Host in pair mode, which allows editing."
    echo "    [h]   help: Display this screen."
    echo "       no args: Attach to pair session if it already exists, otherwise mirror."
  }

  # Client mode command handling:
  # If no command given, call smart_reattach
  if [ -z "$1" ]; then
    smart_reattach
  else
    case "$1" in
      mirror|m) mirror_mode;;
      read|r)   mirror_mode;;
      pair|p)   pair_mode;;
      edit|e)   pair_mode;;
      help|h)   display_client_commands;;
      *)        $wemux $1;;
    esac
  fi
}

# Check if current user is listed in the host_list.
user_is_a_host() {
  for user in "${host_list[@]}"
  do
    [[ "$user" == "$USER" ]] && return 0
  done
  return 1
}

# Don't allow wemux to be run directly within a wemux session.
if [[ "$TMUX" != *wemux* ]]; then
  if user_is_a_host; then
    host_mode $1
  else
    client_mode $1
  fi
else
  echo "wemux does not allow nesting wemux sessions directly."
fi
