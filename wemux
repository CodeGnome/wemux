#!/bin/bash
# wemux by Matt Furden @zolrath
# version 1.9.0
#
# wemux allows you to start a shared tmux session using the command 'wemux'.
# Clients have the option of mirroring, which will give them read-only access,
# or pairing, which will allow them to edit your file (shared cursor) or work
# in another window (separate cursors) in the hosts tmux session.
#
# To set a user as host add their username to the host_list in /etc/wemux.conf
# Other configuations options are also located in /etc/wemux.conf
#
# For environments with multiple hosts running their own independent sessions
# on the same machine wemux can change its hostname with the wemux name command.
# This can be enabled in the configuration file.
#
# WEMUX HOST COMMANDS:
# wemux start : Start the wemux session/join an existing wemux session.
# wemux attach: Join an existing wemux session.
# wemux stop  : Stop the wemux server, delete the socket.
# wemux users : List the currently connected wemux users.
# wemux config: Open the wemux configuration file in your $EDITOR."
# wemux help  : Display the help screen.
#
# WEMUX CLIENT COMMANDS:
# wemux mirror: Attach to Host in read-only mode.
# wemux pair  : Attach to Host in pair mode, which allows editing.
# wemux logout: Log out of the wemux pairing session.
# wemux users : List the currently connected wemux users.
# wemux help  : Display the help screen.
#
# To enable multi-host commands, set allow_host_change="true" in wemux.conf
# WEMUX HOSTNAME COMMANDS: can be run by either host or client.
# wemux name  : Change hostname of wemux session.
# wemux reset : Reset host to default: host
# wemux list  : List all currently active wemux hosts.

###############################################################################

# Current wemux version.
version="1.9.0"

# Setup and Configuration Files.
# Default settings, modify them in the /etc/wemux.conf file:
host_list=(root)
socket_prefix="/tmp/wemux"
options="-u"
allow_pair_mode="true"
default_client_mode="mirror"
allow_host_change="false"
allow_host_list="true"
allow_user_list="true"
announce_attach="true"
announce_host_change="true"

# Load configuration options from /etc/wemux.conf
[ -f /etc/wemux.conf ] && . /etc/wemux.conf

# Sanitize hostname, replace spaces and underscores with dashes.
# Remove all non alpha-numeric characters.
sanitize_hostname() {
  local newhost=$@
  local newhost=${newhost// /\-}
  local newhost=${newhost//_/\-}
  local newhost=${newhost//[^a-zA-Z0-9\-]/}
  echo $newhost
}

# Load the hostname of last wemux session. If empty, set to host.
# Change hostname to 'host' if allow_host_change is disabled.
if [ $allow_host_change == "true" ]; then
  if [ -f ~/.wemux_last_host ]; then
    host=`cat ~/.wemux_last_host`
    host=`sanitize_hostname $host`
    echo $host > ~/.wemux_last_host
  else
    host="host"
  fi
else
  host="host"
fi

# Build $wemux variable to call proper tmux server/session.
build_wemux_prefix() {
  # Set client's pair mode session name.
  client_session="$host-$USER"
  # Set socket to include hostname.
  socket="${socket_prefix}-$host"
  # Set $wemux to wemux session file.
  wemux="tmux -S $socket $options"
}

# List all currently running wemux servers.
list_active_hosts() {
  if [ $allow_host_change == "true" ]; then
    if [ $allow_host_list == "true" ]; then
      wemux_host_sockets=$socket_prefix*
      echo "Currently active wemux hosts:"
      echo ""
      for socket in $wemux_host_sockets; do
        redirect=`tmux -S $socket server-info 2>&1`; server_running=$?
        if [ $server_running == 0 ]; then
          num=$[num+1]
          hostname=`echo "$socket" | sed -e "s,$socket_prefix-,,"`
          echo "$num. $hostname"
        fi
      done
      echo ""
      echo "Current wemux hostname: $host"
    # allow_host_list is disabled:
    else
      echo "Hostname listing has been disabled."
      return 126
    fi
  # allow_host_change is disabled:
  else
    echo "Hostname related commands have been disabled."
    return 126
  fi
}

# Tmux status line uses global variables, until something is changed this won't
# work for filtering users from the user list.
# set_current_user() {
#   `$wemux set-environment -t $client_session CURRENT_WEMUX_USER $(whoami)`
# }

# List users currently connected to wemux sessions. Username[m] for mirror mode.
# Only contains names. Formatted for being included as part of status bar.
status_users() {
  if [ $allow_user_list == "true" ]; then
    while IFS= read line; do
      read name mode <<<$(echo $line)
      # Get user associated with tty
      name=`stat -f%Su $name`
      # If user is attached in read-only mode, set mode to [m]
      [[ $mode == 0 ]] && mode="" || mode="[m]"
      # If user/mode is already is userlist, do not add them again.
      if ! [[ "$users" =~ "$name$mode " ]]; then
        users="$users$name$mode, "
      fi
    done < <(wemux list-clients -F "#{client_tty},#{client_readonly}" | tr ',' ' ')
    # Strip last two characters ', '
    echo "${users%??}"
  else
    echo "User list disabled."
    return 126
  fi
}

# List users currently connected to wemux session with informative string.
# More verbose, intended for use in terminal.
list_users() {
  if [ $allow_user_list == "true" ]; then
    users="$(wemux status_users)"
    if [ -z $users ]; then
      echo "No wemux users connected."
    else
      echo "Connected wemux Users: "
      echo $users
    fi
  else
    echo "User listing has been disabled."
  fi
}

# Display the currently attached users verbosely in a tmux message.
display_users() {
    redirect=`$wemux display-message "$(wemux users)" 2>&1`
}

# The ugly group of redirects below solve the issue where tmux/epoll causes tmux
# to hang when stderr is redirected to /dev/null in a backwards compatible way.

# Returns true if host currently has a running wemux server.
host_exists() {
  redirect=`$wemux has-session -t $host 2>&1`; does_exist=$?
  [ $does_exist == 0 ] && return 0 || return 1;
}

# Returns true if pair session with current host already exists.
has_pair_session() {
  redirect=`$wemux has-session -t $client_session 2>&1`; does_exist=$?
  [ $does_exist == 0 ] && return 0 || return 1;
}

# Returns true if server is successfully killed.
kill_server_successful() {
  redirect=`$wemux kill-server 2>&1`; killed_successfully=$?
  [ $killed_successfully == 0 ] && return 0 || return 1;
}

# Announce when user attaches/detaches from server.
# Can be disabled by changing announce_attach to false in /etc/wemux.conf
# The first argument specifies the mode the user is attaching in for the message
# All additional arguments get wrapped in the attach/detach messages.
announce_connection() {
  connection_type=$1; shift; attach_commands="$@"
  [ $announce_attach == "true" ] && redirect=`$wemux display-message \
    "$USER has attached in $connection_type mode." 2>&1`
  $attach_commands
  [ $announce_attach == "true" ] && redirect=`$wemux display-message \
    "$USER has detached." 2>&1`
  return 0
}

# Announces when a user joins/changes their hostname.
# Can be disabled by changing announce_host_change to false in /etc/wemux.conf
# Change hostname for session, or display hostname if no argument is given.
change_host() {
  if [ $allow_host_change == "true" ]; then
    # Sanitize input.
    newhost=`sanitize_hostname $@`
    oldhost=$host

    if [ -z $1 ]; then
      echo "The current wemux hostname is set to $host"
    elif [ $newhost == $oldhost ]; then
      echo "Your hostname is already set to $host"
    else
      [ $announce_host_change == "true" ] && redirect=`$wemux display-message \
        "$USER has switched to hostname: $newhost" 2>&1`
      echo "Changed wemux hostname from $oldhost to $newhost"
      host=$newhost
      echo $host > ~/.wemux_last_host
      build_wemux_prefix
      [ $announce_host_change == "true" ] && redirect=`$wemux display-message \
        "$USER has joined this hostname." 2>&1`
    fi
  else
    echo "Changing hostnames has been disabled."
    return 126
  fi
  return 0
}

# Display version of wemux installed on system. Show URL for wemux.
display_version() {
  echo "wemux $version"
  echo "To check for a newer version visit: http://www.github.com/zolrath/wemux"
}

# Host mode, used when user is listed in the host_list array in /etc/wemux.conf
host_mode() {
  # Start the server if it doesn't exist, otherwise reattach.
  start_server() {
    if ! host_exists; then
      $wemux new-session -d -s $host
      chmod 1777 $socket
      echo "wemux server started on $host."
    fi
    reattach
  }

  # Reattach to the wemux session.
  reattach() {
    if host_exists; then
      $wemux attach -t $host
    else
      echo "No wemux session to attach to on $host."
    fi
  }

  # Stop the wemux session and remove the socket file.
  stop_server() {
    if kill_server_successful; then
      echo "wemux server on $host stopped."
    else
      echo "No wemux server running on $host."
    fi
    # If the socket file exists:
    if [ -e $socket ]; then
      if rm $socket; then
        echo "Removed $socket."
      else
        echo "Could not remove $socket. Please check file ownership."
      fi
    else
      echo "The wemux socket $socket does not exist."
    fi
  }

  # Display the commands available in host mode.
  display_host_commands() {
    echo "wemux version $version"
    if [ $allow_host_change == "true" ]; then
      echo "The current wemux hostname is set to $host"
    fi
    echo ""
    echo "Usage: wemux [command]"
    echo "To host a wemux session please use one of the following:"
    echo ""
    echo "    [s]       start: Start the wemux session/join an existing wemux session."
    echo "    [a]      attach: Join an existing wemux session."
    echo "    [k]        stop: Kill the wemux session, delete the socket."
    echo ""
    if [ $allow_host_change == "true" ]; then
      echo "    [n] name [name]: Set wemux hostname to supplied name."
      echo "    [r]       reset: Reset host to default: host"
      if [ $allow_host_list == "true" ]; then
        echo "    [l]        list: List all currently active wemux hosts."
      fi
    fi
    if [ $allow_user_list == "true" ]; then
      echo "    [u]       users: List all users currently connected to wemux."
    fi
    echo "    [c]      config: Open the wemux configuration file in $EDITOR."
    echo "    [h]        help: Display this screen."
    echo "            no args: Start the wemux session/join an existing wemux session."
  }

  # Host mode command handling:
  # If no command given, call start server.
  if [ -z "$1" ]; then
    announce_connection "host" start_server
  else
    case "$1" in
      start|s)       announce_connection "host" start_server;;
      attach|a)      announce_connection "host" reattach;;
      join|j)        announce_connection "host" reattach;;
      stop|st)       stop_server;;
      kill|k)        stop_server;;
      help|h)        display_host_commands;;
      name|n)        shift; change_host $@;;
      reset|r)       change_host host;;
      list|l)        list_active_hosts;;
      users|u)       list_users;;
      status_users)  status_users;;
      display_users) display_users;;
      version|v)     display_version;;
      conf*|c)       $EDITOR /etc/wemux.conf;;
      *)             if ! $wemux $@; then
                       display_host_commands
                     fi;;
    esac
  fi
}

# Client Mode, used when user is NOT listed in the host_list in /etc/wemux.conf
client_mode() {
  # Mirror mode, allows the user to view wemux session in read only mode.
  mirror_mode() {
    if host_exists; then
      $wemux attach -t $host -r
    else
      echo "No wemux session to mirror on $host."
    fi
  }

  # Pair mode, allows user to interact with wemux session.
  # Will connect to existing pair session or create one if necessary.
  pair_mode() {
    if [ $allow_pair_mode == "true" ]; then
      if has_pair_session; then
        $wemux attach -t $client_session
      elif host_exists; then
        $wemux new-session -d -t $host -s $client_session
        set_current_user
        $wemux new-window -n $USER
        $wemux attach -t $client_session
      else
        echo "No wemux session to pair with on $host."
      fi
    else
      echo "Pair mode is disabled."
      return 126
    fi
  }

  # Log user out of pair mode, allows them to wemux pair HOSTNAME with another.
  logout_pair() {
    if [ $allow_pair_mode == "true" ]; then
      if has_pair_session; then
        [ $announce_attach == "true" ] && $wemux display-message \
          "$USER has logged out of pair mode."
        $wemux kill-session -t $client_session
        echo "Logged out of pair mode with $host."
      else
        echo "No wemux session to log out of with $host."
      fi
    else
      echo "Pair mode is disabled."
      return 126
    fi
  }

  # Reattach based upon presence of existing pair mode session.
  # If pair mode session exists, reattach to it.
  # If no pair mode session exists, mirror the host.
  smart_reattach() {
    if [ $default_client_mode == "pair" ] && [ $allow_pair_mode == "true" ]; then
        announce_connection "pair" pair_mode
    else
      if has_pair_session && [ $allow_pair_mode == "true" ]; then
        announce_connection "pair" $wemux attach -t $client_session
      elif host_exists; then
        announce_connection "mirror" $wemux attach -t $host -r
      else
        echo "No wemux session to attach to on $host."
      fi
    fi
  }

  # Display the commands available in client mode.
  display_client_commands() {
    echo "wemux version $version"
    if [ $allow_host_change == "true" ]; then
      echo "The current wemux hostname is set to $host"
    fi
    echo ""
    echo "Usage: wemux [command]"
    echo "To connect to wemux please use one of the following:"
    echo ""
    echo "    [m]      mirror: Attach to host in read-only mode."
    if [ $allow_pair_mode == "true" ]; then
      echo "    [p]        pair: Attach to host in pair mode, which allows editing."
      echo "    [o]      logout: Log out of the current wemux pairing session."
    fi
    echo ""
    if [ $allow_host_change == "true" ]; then
      echo "    [n] name [name]: Set name of wemux hostname you wish to connect to."
      echo "    [r]       reset: Reset host to default: host"
      if [ $allow_host_list == "true" ]; then
        echo "    [l]        list: List all currently active wemux hosts."
      fi
    fi
    if [ $allow_user_list == "true" ]; then
      echo "    [u]       users: List all users currently connected to wemux."
    fi
    echo "    [h]        help: Display this screen."
    if [ $allow_pair_mode == "true" ]; then
      echo "            no args: Attach to pair session if it already exists, otherwise mirror."
    else
      echo "            no args: Attach to host in mirror mode."
    fi
  }

  # Client mode command handling:
  # If no command given, call smart_reattach
  if [ -z "$1" ]; then
    smart_reattach
  else
    case "$1" in
      mirror|m)      announce_connection "mirror" mirror_mode;;
      pair|p)        announce_connection "pair" pair_mode;;
      edit|e)        announce_connection "pair" pair_mode;;
      logout|o)      logout_pair;;
      stop|s)        logout_pair;;
      help|h)        display_client_commands;;
      name|n)        shift; change_host $@;;
      reset|r)       change_host host;;
      list|l)        list_active_hosts;;
      users|u)       list_users;;
      status_users)  status_users;;
      display_users) display_users;;
      version|v)     display_version;;
      *)             if ! $wemux $@; then
                       display_client_commands
                     fi;;
    esac
  fi
}

# Check if current user is listed in the host_list.
user_is_a_host() {
  for user in "${host_list[@]}"; do
    [[ "$user" == "$USER" ]] && return 0
  done
  return 1
}

allowed_nested_command() {
  commands=(users u display_users status_users list-clients version v)
  for command in "${commands[@]}"; do
    [[ "$command" == $1 ]] && return 0
  done
  return 1
}

# Create $wemux variable.
build_wemux_prefix

# Don't allow wemux to be run directly within a wemux session.
if [[ "$TMUX" != *$socket* ]] || allowed_nested_command $1 ; then
  # If user is in host list, use host mode. If not, use client mode.
  if user_is_a_host; then
    host_mode "$@"
  else
    client_mode "$@"
  fi
else
  echo "You're already attached to the wemux session on $host"
  echo "wemux does not allow nesting wemux sessions directly."
fi
