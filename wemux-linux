#!/bin/bash
# wemux-linux by Matt Furden @zolrath
# Linux version removes stderr redirection until tmux/epoll error is fixed.
# version 1.2.3
#
# wemux allows you to start a shared tmux session using the command 'wemux'.
# Clients have the option of mirroring, which will give them read-only access,
# or pairing, which will allow them to edit your file (shared cursor) or work
# in another window (separate cursors) in the hosts tmux session.
#
# To set a user as host add their username to the host_list in /etc/wemux.conf
#
# WEMUX HOST COMMANDS:
# wemux start : Start the wemux session/join an existing wemux session.
# wemux attach: Join an existing wemux session.
# wemux stop  : Stop the wemux server, delete the socket.
# wemux name  : Change hostname of wemux session.
# wemux reset : Reset host to default: host
# wemux help  : Display the help screen.
#
# WEMUX CLIENT COMMANDS:
# wemux mirror: Attach to Host in read-only mode.
# wemux pair  : Attach to Host in pair mode, which allows editing.
# wemux logout: Log out of the wemux pairing session.
# wemux name  : Change hostname of wemux session.
# wemux reset : Reset host to default: host
# wemux help  : Display the help screen.

###############################################################################

# Setup and Configuration Files.
# Default settings in case /etc/wemux.conf doesn't exist:
host_list=(root)
socket_prefix="/tmp/wemux"
options="-u"

# Load configuration options from /etc/wemux.conf
if [ -f /etc/wemux.conf ]; then
  . /etc/wemux.conf
fi

# Change hostname for session.
change_host() {
  echo "Changed wemux hostname from $host to $1"
  host="$1"
  echo $host > ~/.wemux_last_host
}

# Load the hostname of last wemux session.
if [ -f ~/.wemux_last_host ]; then
  host=`cat ~/.wemux_last_host`
else
  change_host host
fi

# Set client's pair mode session name.
client_session="$host-$USER"

# Set socket to include hostname.
socket="${socket_prefix}-$host"

# Set $wemux to wemux session file.
wemux="tmux -S $socket $options"

# Host mode, used when user is listed in the host_list array in /etc/wemux.conf
host_mode() {
  # Start the server if it doesn't exist, otherwise reattach.
  start_server() {
    if ! $wemux has-session -t $host; then
      $wemux new-session -d -s $host
      chmod 1777 $socket
      echo "wemux server started."
    fi
    reattach
  }

  # Reattach to the wemux session.
  reattach() {
    if $wemux has-session -t $host; then
      $wemux display-message "$USER has reattached."
      $wemux attach -t $host
      $wemux display-message "$USER has detached."
    else
      echo "No wemux session to attach to on $host."
    fi
  }

  # Stop the wemux session and remove the socket file.
  stop_server() {
    if $wemux kill-server; then
      echo "wemux server stopped."
    else
      echo "No wemux server running."
    fi
    if [ -e $socket ]; then
      if rm $socket; then
        echo "Removed $socket."
      else
        echo "Could not remove $socket. Please check file ownership."
      fi
    else
      echo "The wemux session file $socket does not exist."
    fi
  }

  # Display the commands available in host mode.
  display_host_commands() {
    echo "The current wemux host is set to $host"
    echo "To host a wemux session please use one of the following:"
    echo ""
    echo "    [s]  start: Start the wemux session/join an existing wemux session."
    echo "    [a] attach: Join an existing wemux session."
    echo "    [k]   stop: Kill the wemux session, delete the session file."
    echo "    [n]   name: Set wemux hostname to supplied name."
    echo "    [r]  reset: Reset host to default: host"
    echo "    [h]   help: Display this screen."
    echo "       no args: Start the wemux session/join an existing wemux session."
  }

  # Host mode command handling:
  # If no command given, call start server.
  if [ -z "$1" ]; then
    start_server
  else
    case "$1" in
      start|s)  start_server;;
      attach|a) reattach;;
      join|j)   reattach;;
      stop|st)  stop_server;;
      kill|k)   stop_server;;
      help|h)   display_host_commands;;
      name|n)   change_host $2;;
      reset|r)  change_host host;;
      *)        if ! $wemux $1; then
                  display_host_commands
                fi;;
    esac
  fi
}

# Client Mode, used when user is NOT listed in the host_list in /etc/wemux.conf
client_mode() {
  # Mirror mode, allows the user to view wemux session in read only mode.
  mirror_mode() {
    if $wemux has-session -t $host; then
      $wemux display-message "$USER has attached in mirror mode."
      $wemux attach -t $host -r
      $wemux display-message "$USER has detached."
    else
      echo "No wemux session to mirror on $host."
    fi
  }

  # Pair mode, allows user to interact with wemux session.
  # Will connect to existing pair session or create one if necessary.
  pair_mode() {
    if $wemux has-session -t $client_session; then
      $wemux display-message "$USER has reattached in pair mode."
      $wemux attach -t $client_session
      $wemux display-message "$USER has detached."
    elif $wemux has-session -t $host; then
      $wemux display-message "$USER has attached in pair mode."
      $wemux new-session -d -t $host -s $client_session
      $wemux new-window -n $USER
      $wemux attach -t $client_session
      $wemux display-message "$USER has detached."
    else
      echo "No wemux session to pair with on $host."
    fi
  }

  # Log user out of pair mode, allows them to wemux pair HOSTNAME with another.
  logout_pair() {
    if $wemux has-session -t $client_session; then
      $wemux display-message "$USER has logged out of pair mode."
      $wemux kill-session -t $client_session
      echo "Logged out of pair mode with $host."
    else
      echo "No wemux session to log out of with $host."
    fi
  }

  # Reattach based upon presence of existing pair mode session.
  # If pair mode session exists, reattach to it.
  # If no pair mode session exists, mirror the host.
  smart_reattach() {
    if $wemux has-session -t $client_session; then
      $wemux display-message "$USER has reattached in pair mode."
      $wemux attach -t $client_session
      $wemux display-message "$USER has detached."
    elif $wemux has-session -t $host; then
      $wemux display-message "$USER has attached in mirror mode."
      $wemux attach -t $host -r
      $wemux display-message "$USER has detached."
    else
      echo "No wemux session to attach to on $host."
    fi
  }

  # Display the commands available in client mode.
  display_client_commands() {
    echo "The current wemux host is set to $host"
    echo "To connect to wemux please use one of the following:"
    echo ""
    echo "    [m] mirror: Attach to Host in read-only mode."
    echo "    [p]   pair: Attach to Host in pair mode, which allows editing."
    echo "    [l] logout: Log out of the current wemux pairing session."
    echo "    [n]   name: Set name of wemux hostname you wish to connect to."
    echo "    [r]  reset: Reset host to default: host"
    echo "    [h]   help: Display this screen."
    echo "       no args: Attach to pair session if it already exists, otherwise mirror."
  }

  # Client mode command handling:
  # If no command given, call smart_reattach
  if [ -z "$1" ]; then
    smart_reattach
  else
    case "$1" in
      mirror|m) mirror_mode;;
      pair|p)   pair_mode;;
      edit|e)   pair_mode;;
      logout|l) logout_pair;;
      stop|s)   logout_pair;;
      help|h)   display_client_commands;;
      name|n)   change_host $2;;
      reset|r)  change_host host;;
      *)        if ! $wemux $1; then
                  display_client_commands
                fi;;
    esac
  fi
}

# Check if current user is listed in the host_list.
user_is_a_host() {
  for user in "${host_list[@]}"; do
    [[ "$user" == "$USER" ]] && return 0
  done
  return 1
}

# Don't allow wemux to be run directly within a wemux session.
if [[ "$TMUX" != *$socket* ]]; then
  # If user is in host list, use host mode. If not, use client mode.
  if user_is_a_host; then
    host_mode "$@"
  else
    client_mode "$@"
  fi
else
  echo "wemux does not allow nesting wemux sessions directly."
fi
