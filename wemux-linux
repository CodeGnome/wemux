#!/bin/sh
# wemux-linux by Matt Furden @zolrath
# version 1.0.1
# Linux version removes stderr redirection until tmux/epoll error is fixed.
#
# wemux allows you to start a shared tmux session using the command 'wemux'.
# Clients have the option of mirroring, which will give them read-only access,
# or pairing, which will allow them to edit your file (shared cursor) or work
# in another window (separate cursors) in the hosts tmux session.
#
# To set a user as host add the following line to their .bash_profile or .zshrc
# export WEMUX_HOST=true
#
# WEMUX HOST COMMANDS:
# wemux start : Start the wemux session/join an exist wemux session.
# wemux stop  : Stop the wemux session, delete the session file.
# wemux help  : Display the help screen.
#
# WEMUX CLIENT COMMANDS:
# wemux mirror: Attach to Host in read-only mode.
# wemux pair  : Attach to Host in pair mode, which allows editing.
# wemux help  : Display the help screen.

# Set $tmux to wemux session file.
tmux="tmux -S /tmp/wemux"

# Host mode, used when user has the env variable $WEMUX_HOST set to true.
host_mode() {
  # Start the server if it doesn't exist, otherwise reattach.
  start_server() {
    if ! $tmux has-session -t Host; then
      $tmux new-session -d -s Host
      chmod 1777 /tmp/wemux
    fi
    reattach
  }

  # Reattach to the wemux session.
  reattach() {
    $tmux display-message "$USER has reattached."
    $tmux attach -t Host
    $tmux display-message "$USER has detached."
  }

  # Stop the wemux session and remove the /tmp/wemux file.
  stop_server() {
    if $tmux kill-server; then
      echo "wemux server stopped."
    else
      echo "No wemux server running."
    fi
    if [ -e /tmp/wemux ]; then
      if rm /tmp/wemux; then
        echo "Removed /tmp/wemux."
      else
        echo "Could not remove /tmp/wemux. Please check file ownership."
      fi
    else
      echo "The wemux session file /tmp/wemux does not exist."
    fi
  }

  # Display the commands available in host mode.
  display_host_commands() {
    echo "To host a wemux session please use one of the following:"
    echo "    [s]  start: Start the wemux session/join an existing wemux session."
    echo "    [k]   stop: Kill the wemux session, delete the session file."
    echo "    [h]   help: Display this screen."
    echo "       no args: Start the wemux session/join an existing wemux session."
  }

  # Host mode command handling:
  # If no command given, call start server.
  if [ -z "$1" ]; then
    start_server
  else
    case "$1" in
      start|s) start_server;;
      stop|st) stop_server;;
      kill|k)  stop_server;;
      help|h)  display_host_commands;;
      *)       echo "Sorry, we don't understand: $1"
               display_host_commands;;
    esac
  fi
}

# Client Mode, used whenever $WEMUX_HOST is not set.
client_mode() {
  # Mirror mode, allows the user to view wemux session in read only mode.
  mirror_mode() {
    if $tmux has-session -t Host; then
      $tmux display-message "$USER has attached in mirror mode."
      $tmux attach -t Host -r
      $tmux display-message "$USER has detached."
    else
      echo "No wemux session to mirror."
    fi
  }

  # Pair mode, allows user to interact with wemux session.
  # Will connect to existing pair session or create one if necessary.
  pair_mode() {
    if $tmux has-session -t $USER; then
      $tmux display-message "$USER has reattached in pair mode."
      $tmux attach -t $USER
      $tmux display-message "$USER has detached."
    elif $tmux has-session -t Host; then
      $tmux display-message "$USER has attached in pair mode."
      $tmux new-session -d -t Host -s $USER
      $tmux new-window -n $USER
      $tmux attach -t $USER
      $tmux display-message "$USER has detached."
    else
      echo "No wemux session to pair with."
    fi
  }

  # Reattach based upon presence of existing pair mode session.
  # If pair mode session exists, reattach to it.
  # If no pair mode session exists, mirror the host.
  smart_reattach() {
    if $tmux has-session -t $USER; then
      $tmux display-message "$USER has reattached in pair mode."
      $tmux attach -t $USER
      $tmux display-message "$USER has detached."
    elif $tmux has-session -t Host; then
      $tmux display-message "$USER has attached in mirror mode."
      $tmux attach -t Host -r
      $tmux display-message "$USER has detached."
    else
      "No wemux session to attach to."
    fi
  }

  # Display the commands available in client mode.
  display_client_commands() {
    echo "To connect to wemux please use one of the following:"
    echo "    [m] mirror: Attach to Host in read-only mode."
    echo "    [p]   pair: Attach to Host in pair mode, which allows editing."
    echo "    [h]   help: Display this screen."
    echo "       no args: Attach to pair session if it already exists, otherwise mirror."
  }

  # Client mode command handling:
  # If no command given, call smart_reattach
  if [ -z "$1" ]; then
    smart_reattach
  else
    case "$1" in
      mirror|m) mirror_mode;;
      read|r)   mirror_mode;;
      pair|p)   pair_mode;;
      edit|e)   pair_mode;;
      help|h)   display_client_commands;;
      *)        echo "Sorry, we don't understand: $1"
                display_client_commands;;
    esac
  fi
}

# Activate either Host or Client mode depending on WEMUX_HOST variable.
if [ "$WEMUX_HOST" == true ]; then
  host_mode $1
else
  client_mode $1
fi
